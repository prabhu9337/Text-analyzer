{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","backgroundColor","color","myStyle","setMyStyle","btnText","setBtnText","className","style","id","type","onClick","border","Navbar","props","mode","href","title","to","toggleMode","htmlFor","placeholder","TextForm","text","setText","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.608228f5.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle] = useState({\r\n        backgroundColor: 'white',\r\n        color: 'black'\r\n    })\r\n    const [btnText, setBtnText] = useState(\"Enable Darkmode\")\r\n    const darkMode = ()=> {\r\n        if(myStyle.color === 'white'){\r\n            setMyStyle({\r\n                backgroundColor: 'white',\r\n                color: 'black'\r\n            })\r\n            setBtnText(\"Enable Darkmode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                backgroundColor: 'black',\r\n                color: 'white',\r\n                border: '1px solid white'\r\n            })\r\n            setBtnText(\"Enable Lightmode\")\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <h2 className=\"my-2\">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                    <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                        Accordion Item #1\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        Accordion Item #2\r\n                    </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                    <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                        Accordion Item #3\r\n                    </button>\r\n                    </h2>\r\n                  <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n            <button className=\"my-3 mx-2 bg-primary btn btn-dark\" onClick={darkMode}>{btnText}</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n        </li>\r\n      </ul>\r\n      <div className=\"form-check form-switch\">\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className={`form-check-label mx-3 text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\">Enable Darkmode</label>\r\n      </div>\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handelUpClick = ()=> {\r\n        console.log(\"Uppercase was Clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n    }\r\n    const handelLoClick = ()=> {\r\n        console.log(\"Lowercase was Clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n    }\r\n    const handelClearClick = ()=> {\r\n        console.log(\"Clear text was Clicked\" + text);\r\n        let newText = '';\r\n        setText(newText)\r\n        props.showAlert(\"Clear Text\", \"success\");\r\n    }\r\n    const handelCopy = ()=> {\r\n        // console.log(\"I am copy\");\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Copy to Clipboard\", \"success\");\r\n    }\r\n    const handelExtrSpaces = ()=> {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Removed Extraspaces\", \"success\");\r\n    }\r\n    const handelOnChange = (event)=> {\r\n        console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handelOnChange} style={{backgroundColor: props.mode === 'light'?'white':'gray', color: props.mode === 'dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handelUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handelLoClick}>Convert to Lowecase</button>\r\n            <button className=\"btn btn-danger mx-2 my-2\" onClick={handelClearClick}>Clear text</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handelCopy}>Copy text</button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" onClick={handelExtrSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n            <h2>Your text summery</h2>\r\n            <p>{text.length} characters & {text.split(\" \").length} words</p>\r\n            <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=> {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, {useState} from 'react'\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport{\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type)=> {\n      setAlert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 2000);\n  }\n  const toggleMode = ()=> {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = 'gray';\n      showAlert(\"Dark mode has been Enabled\", \"success\");\n      document.title = 'TextUtil - Darkmode';\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been Enabled\", \"success\")\n      document.title = 'TextUtil - Home';\n    }\n  }\n//   const [myStyle, setMyStyle] = useState({\n//     backgroundColor: 'white',\n//     color: 'black'\n// })\n// const [btnText, setBtnText] = useState(\"Enable Darkmode\")\n// const darkMode = ()=> {\n//     if(myStyle.color === 'white'){\n//         setMyStyle({\n//             backgroundColor: 'white',\n//             color: 'black'\n//         })\n//         setBtnText(\"Enable Darkmode\")\n//     }\n//     else{\n//         setMyStyle({\n//             backgroundColor: 'black',\n//             color: 'white',\n//             border: '1px solid white'\n//         })\n//         setBtnText(\"Enable Lightmode\")\n//     }\n// }\n  return (\n    <>\n      {/* <div className=\"body\"> */}\n      <Router>\n       <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n       <Alert alert={alert}/>\n       <div className=\"container my-3\">\n         <Switch>\n           <Route path=\"/about\">\n             <About/>\n           </Route>\n           <Route path=\"/\">\n            <TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>\n           </Route>\n         </Switch>\n       </div>\n       {/* <button className=\"my-3 mx-2 bg-primary btn btn-dark\" onClick={darkMode}>{btnText}</button> */}\n       {/* </div> */}\n       </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}